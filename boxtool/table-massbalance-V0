# -*- coding: utf-8 -*-
"""
Created on Fri Oct 24 17:25:08 2025

@author: sergi
"""
import pandas as pd
import numpy as np

class Table_Balancesv2:
    '''
    Description
    Create a dataframe with columns with the name of inputs and outputs and index with studied properties
    inps and outs are numbers while prop is a list with strs
    ---___---
    Instructions of class:
    inps=number, streams which go to the unit
    outs=number, streams which go to the unit
    compounds=list, names of arrroys
    ---___---
    Notes
    The arroy flow will be always include, variable flow is the total flow of a columns
    #Mass balance without Q and without R has C indipendent
    #liberty freedom (C*(S-1))
    #La fila de totales debe incluirse por lo que debo quitarle 1 adicional a los calculos de grados de libertad
    #De momento la matriz debe mostrar los caucales masicos de cada compuesto, ya que mezclar composiciones y caudales complica la automatizacion de la resolucion
    '''
    def __init__(self,inps, outs, compounds):
        prop='prop-'#copy paste to avoid writing mistakes
        flow='flow' #copy paste to avoid writing mistakes
        
        self.inps=inps              #positives
        self.outs=outs              #negatives
        self.compounds=compounds    #
        self.streams=[prop+'rows']  #

        simbols=[0]                 #It is to calculate easier
        
        for i in range(self.inps):
            self.streams.append('IN-'+str(i+1))
            simbols.append(1)
        for i in range(self.outs):
            self.streams.append('OU-'+str(i+1))
            simbols.append(-1)
        
        self.MB=pd.DataFrame(columns=self.streams, index=compounds)
        self.simbols=simbols 
        
    def unknown_v(self):
        #useful to calculate freedom degrees
        unkowns=self.MB.isna().sum().sum()
        print(f'There are {unkowns} variables without value')
    def prop_compounds(self,row,p):
        #row is the name of the index (use compunds[])
        #p is a string (kg, %....)
        #useful to calculate freedom degrees
        self.MB.loc[row,'prop-rows']=p
    def show_all(self):
        #row is the name of the index (use MB.index[x])
        #p is a string (kg, %....)
        #useful to calculate freedom degrees
        print(self.inps)
        print(self.outs)
        print(self.compounds)
        print(self.MB)
        print(self.streams)
        print(self.simbols)
    def matrix_mb(self):
        massbalance=np.array(self.MB.iloc[:,1:])
        z1=0
        for i in self.simbols[1:]:
            massbalance[:, z1] = massbalance[:, z1]*i
            z1=z1+1
        print(massbalance)
        #self.materials=materials

            

    
flow='flow'
materials=['H2O','H2','CO2']
compounds=materials.copy()
compounds.append(flow)
Table=Table_Balancesv2(2, 2, compounds)
Table.unknown_v()
Table.MB.iloc[0,0]=0
Table.MB.iloc[1,1]=1
Table.MB.iloc[2,2]=2
Table.MB.iloc[3,3]=3

Table.matrix_mb()
